{"version":3,"sources":["assets/logo-inspector-hook.png","components/Title.jsx","components/CurrentBin.jsx","urls.js","components/NewBinButton.jsx","components/RequestList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Title","class","src","logo","style","width","alt","CurrentBin","cookie","setRequests","currentRequests","getRequestsForBin","binID","a","axios","get","then","res","console","log","data","catch","err","response","requests","onClick","setCurrentRequests","NewBinButton","handleCookie","createNewBin","post","binIDFromAPI","Request","created_on","JSON","stringify","request","RequestList","requestState","map","App","useState","useCookies","cookies","setCookie","className","path","maxAge","sameSite","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById"],"mappings":"qPAAe,MAA0B,gD,OCc1BA,EAVD,WACb,OACC,sBAAKC,MAAM,aAAX,UACC,oBAAIA,MAAM,WAAV,4BACA,qBAAKC,IAAKC,EAAMC,MAAO,CAAEC,MAAO,KAAOC,IAAI,6CAC3C,oH,uCCqCYC,EAzCI,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,OAAyBC,GAAkB,EAAnCC,gBAAmC,EAAlBD,aAAkB,SAIjDE,EAJiD,8EAIhE,WAAiCC,GAAjC,SAAAC,EAAA,+EACQC,IACLC,IAAI,iCAAmCH,GACvCI,MAAK,SAACC,GAEN,OADAC,QAAQC,IAAI,iBAAkBF,EAAIG,MAC3BH,EAAIG,QAEXC,OAAM,SAACC,GACP,MAAMA,MART,4CAJgE,kEAgBhE,WAAkCV,GAAlC,eAAAC,EAAA,sEACsBF,EAAkBC,GADxC,OACKW,EADL,OAGCd,EAAYc,EAASC,UAHtB,4CAhBgE,sBAuBhE,OAAIhB,EAAOI,MAET,gCACC,0DC/BY,6BD+B2BJ,EAAOI,SAC9C,wBACCa,QAAS,YA5BmD,oCA6B3DC,CAAmBlB,EAAOI,QAF5B,kCAUK,uEEJMe,EAlCM,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcnB,EAAkB,EAAlBA,YAE/BoB,EAAe,WACpB,OAAOf,IACLgB,KAAK,wCACLd,MAAK,SAACC,GAEN,OADAC,QAAQC,IAAIF,EAAIG,KAAKR,OACdK,EAAIG,KAAKR,SAEhBS,OAAM,SAACC,GACPJ,QAAQC,IAAIG,OAVwC,4CAgBvD,4BAAAT,EAAA,sEAE0BgB,IAF1B,OAEKE,EAFL,OAICb,QAAQC,IAAI,gBAAiBY,GAE7BH,EAAaG,GACbtB,EAAY,IAPb,4CAhBuD,sBA0BvD,OACC,gCACC,6DACA,wBAAQgB,QA7B6C,2CA6BrD,4BCnBGO,EAAU,SAAC,GAAc,IAAZZ,EAAW,EAAXA,KAGlB,OAFAF,QAAQC,IAAI,eAAgBC,GAG3B,gCACC,6BAAKA,EAAKa,aACTC,KAAKC,UAAUf,EAAKgB,QAAS,KAAM,OAKxBC,EAtBK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEtB,OADApB,QAAQC,IAAI,iBAAkBmB,GAE7B,8BACEA,EAAaC,KAAI,SAACH,GAClB,OAAO,cAAC,EAAD,CAAkChB,KAAMgB,GAA1BA,EAAQH,kBCsBlBO,MApBf,WACC,MAAkCC,mBAAS,IAA3C,mBAAQjB,EAAR,KAAkBf,EAAlB,KAIA,EAA+BiC,YAAW,CAAE,UAA5C,mBAAQC,EAAR,KAAiBC,EAAjB,KAKA,OACC,sBAAKC,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,CAAcjB,aAPhB,SAAsBG,GACrBa,EAAU,QAASb,EAAc,CAAEe,KAAM,IAAKC,OAAQ,OAAQC,SAAU,YAM7BvC,YAAaA,IACvD,cAAC,EAAD,CAAYD,OAAQmC,EAASjC,gBAAiBc,EAAUf,YAAaA,IACrE,cAAC,EAAD,CAAa6B,aAAcd,QCbfyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAACC,EAAA,EAAD,UACC,cAAC,EAAD,QAGFC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.fc506153.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-inspector-hook.e3d9f7ae.png\";","import React from 'react';\nimport logo from '../assets/logo-inspector-hook.png';\n\n// non-interactive title\nconst Title = () => {\n\treturn (\n\t\t<div class=\"App-header\">\n\t\t\t<h1 class=\"App-logo\">Inspector Hook</h1>\n\t\t\t<img src={logo} style={{ width: 320 }} alt=\"Inspector Hook is watching your webhooks\" />\n\t\t\t<p>Create a new bin to collect api requests, or view the requests of a current bin</p>\n\t\t</div>\n\t);\n};\n\nexport default Title;\n","import React from 'react';\nimport axios from 'axios';\nimport { BASEURL } from '../urls';\n\n// track current bin\nconst CurrentBin = ({ cookie, currentRequests, setRequests }) => {\n\t// console.log('currentBin cookie: ', cookie);\n\t// console.log('currentBin binID: ', cookie.binID);\n\n\tasync function getRequestsForBin(binID) {\n\t\treturn axios\n\t\t\t.get('http://inspector-hook.com/api/' + binID)\n\t\t\t.then((res) => {\n\t\t\t\tconsole.log('get requests: ', res.data);\n\t\t\t\treturn res.data;\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t}\n\n\tasync function setCurrentRequests(binID) {\n\t\tlet response = await getRequestsForBin(binID);\n\t\t// console.log('setting :', response.requests);\n\t\tsetRequests(response.requests);\n\t\t// console.log('state changed :', currentRequests);\n\t}\n\n\tif (cookie.binID) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3>Your current bin is at: {BASEURL + cookie.binID}</h3>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetCurrentRequests(cookie.binID);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tView all requests\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <h3>You don't have a bin to inspect yet!</h3>;\n\t}\n};\n\nexport default CurrentBin;\n","const BASEURL = 'http://inspector-hook.com/';\nconst APICREATEPOSTURL = 'http://inspector-hook.com/api/newBin';\nconst APIGETREQUESTSURL = 'http://inspector-hook.com/api/';\n\nexport { BASEURL, APICREATEPOSTURL, APIGETREQUESTSURL };\n","import React from 'react';\nimport axios from 'axios';\n\n// button to create a new bin uuid on api\nconst NewBinButton = ({ handleCookie, setRequests }) => {\n\t// send post request to api to create a new uuid in db\n\tconst createNewBin = () => {\n\t\treturn axios\n\t\t\t.post('http://inspector-hook.com/api/newBin')\n\t\t\t.then((res) => {\n\t\t\t\tconsole.log(res.data.binID);\n\t\t\t\treturn res.data.binID;\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t};\n\n\t// create a new bin and wait for response, then set cookie to new uuid and reset requests state\n\tasync function handleClick() {\n\t\t// api call to create new bin, set to local\n\t\tlet binIDFromAPI = await createNewBin();\n\n\t\tconsole.log('binIDFromAPI ', binIDFromAPI);\n\n\t\thandleCookie(binIDFromAPI);\n\t\tsetRequests([]);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Create a new inspector bin:</h2>\n\t\t\t<button onClick={handleClick}>Create Bin</button>\n\t\t</div>\n\t);\n};\n\nexport default NewBinButton;\n","import React from 'react';\n\n// List requests based on state tracking requests for uuid\nconst RequestList = ({ requestState }) => {\n\tconsole.log('request list: ', requestState);\n\treturn (\n\t\t<div>\n\t\t\t{requestState.map((request) => {\n\t\t\t\treturn <Request key={request.created_on} data={request} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nconst Request = ({ data }) => {\n\tconsole.log('in Request: ', data);\n\n\treturn (\n\t\t<div>\n\t\t\t<h4>{data.created_on}</h4>\n\t\t\t{JSON.stringify(data.request, null, 4)}\n\t\t</div>\n\t);\n};\n\nexport default RequestList;\n","import './App.css';\nimport { useCookies } from 'react-cookie';\nimport React, { useState } from 'react';\n\n// components\nimport Title from './components/Title';\nimport CurrentBin from './components/CurrentBin';\nimport NewBinButton from './components/NewBinButton';\nimport RequestList from './components/RequestList';\n\nfunction App() {\n\tconst [ requests, setRequests ] = useState([]);\n\t// add effect hook for fetching requests if cookie contains uuid\n\n\t// cookie for bin id\n\tconst [ cookies, setCookie ] = useCookies([ 'binID' ]);\n\tfunction handleCookie(binIDFromAPI) {\n\t\tsetCookie('binID', binIDFromAPI, { path: '/', maxAge: 172800, sameSite: 'strict' });\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Title />\n\t\t\t<NewBinButton handleCookie={handleCookie} setRequests={setRequests} />\n\t\t\t<CurrentBin cookie={cookies} currentRequests={requests} setRequests={setRequests} />\n\t\t\t<RequestList requestState={requests} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CookiesProvider } from 'react-cookie';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<CookiesProvider>\n\t\t\t<App />\n\t\t</CookiesProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}